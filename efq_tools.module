<?php
/**
* @file
* Entity Field Query tools box
*/


/**
 * Return entities for conditions limited by $count
 *
 * @param string Drupal::bundle $bundle
 * @param array $conditions
 *  type = entity|field|property|orderby|fieldorderby
 *  name
 *  value
 *  operator
 *
 * @param int||array $count (if array : array('start', 'count')
 * @return array(Drupal::node)
 */
function efq_tools_get($entity_type, $bundle = 'all', $conditions = array(), $count = array(), $operation = null) {
  $iscached = variable_get('efq_tools_cache', TRUE);
  if ($iscached) {
    $cacheKey = 'efq_tools_get_' . base64_encode($entity_type) . base64_encode(serialize($bundle) . '_' . base64_encode(serialize($conditions)) . '_' . base64_encode(serialize($count)) . '_' . base64_encode(serialize($operation)));
    if ($cached = cache_get($cacheKey, 'cache')) {
      $return = $cached->data;
      if (!empty($return)) {
        return $return;
      }
    }
  }

  $allowEntity = entity_get_info();
  if (!in_array($entity_type, array_keys($allowEntity))) {
    drupal_set_message(t('EFQ Tools error : Entity "%entity" not allowed', array('%entity' => $entity_type)), 'error');
    return false;
  }


  if (is_int($count)) {
    $count = array('start' => 0, 'count' => $count);
  }


  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', $entity_type);

  if ($entity_type == 'node') {
    if ($bundle != 'all') {
      $allowBundles = node_type_get_types();
      if (!is_array($bundle)) {
        if (!in_array($bundle, array_keys($allowBundles))) {
          drupal_set_message(t('EFQ Tools error : Bundle "%bundle" not allowed', array('%bundle' => $bundle)), 'error');
          return false;
        }
      } else {
        foreach ($bundle as $b) {
          if (!in_array($b, array_keys($allowBundles))) {
            drupal_set_message(t('EFQ Tools error : Bundle "%bundle" not allowed', array('%bundle' => $b)), 'error');
            return false;
          }
        }
      }
      $entities->entityCondition('bundle', $bundle);
    }
  }

  foreach ($conditions as $key => $condition) {
    if (!isset($condition['operator'])) {
      $condition['operator'] = '=';
    }
    switch ($condition['type']) {
      case 'entity':
        $entities->entityCondition($condition['name'], $condition['value'], $condition['operator']);
        break;
      case 'property':
        $entities->propertyCondition($condition['name'], $condition['value'], $condition['operator']);
        break;
      case 'field':
        $entities->fieldCondition($condition['name'], $condition['column'], $condition['value'], $condition['operator']);
        break;
      case 'orderby':
        $entities->propertyOrderBy($condition['name'], $condition['value']);
        break;
      case 'fieldorderby':
        $condition['operator'] = $condition['operator'] == '=' ? 'ASC' : $condition['operator'];
        $entities->fieldOrderBy($condition['name'], $condition['column'], $condition['operator']);
        break;
      case 'tag':
        $entities->addTag($condition['name']);
        break;

      default:
        break;
    }
  }


  if (is_array($count) && $count != array()) {
    $entities->range($count['start'], $count['count']);
  }

  if ($operation != null) {
    switch ($operation) {
      case 'count':
        $entities->count();
        break;

      default:
        break;
    }
  }

  $entities = $entities->execute();
  if (is_null($operation)) {
    $result = array();
    if (!empty($entities['node'])) {
      $result = node_load_multiple(array_keys($entities['node']));
    }
  } else {
    $result = $entities;
  }


  if ($iscached) {
    $cacheTime = variable_get('efq_tools_cachetime', 30 * 60);
    cache_set($cacheKey, $result, 'cache', time() + $cacheTime); //30min
  }
  return $result;
}


/**
 * Build EFQ Condition
 *
 * @param string $type (entity|field|property|orderby|fieldorderby)
 * @param string $name
 * @param string $value
 * @param string $operator
 * @param string $column
 * @return array
 */
function efq_tools_condition($type, $name, $value = null, $operator = '=', $column = 'value') {
  $allowedType = array('entity', 'field', 'property', 'orderby', 'fieldorderby', 'tag');
  if (!in_array($type, $allowedType)) {
    drupal_set_message(t('EFQ Tools error : Condition type "%type" not allowed', array('%type' => $type)), 'error');
    return false;
  }

  return array(
    'type' => $type,
    'name' => $name,
    'value' => $value,
    'operator' => $operator,
    'column' => $column
  );
}

function efq_tools_admin() {
  $form = array();
  $cache_opt = array(FALSE => t('No'), TRUE => t('Yes'));
  $form['efq_tools_cache'] = array(
    '#type' => 'radios',
    '#title' => t('Enable Cache ?'),
    '#default_value' => variable_get('efq_tools_cache', TRUE),
    '#options' => $cache_opt,
    '#description' => t("If is enable, will put all request in the drupal cache."),
    '#required' => TRUE,
  );
  $form['efq_tools_cachetime'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache time'),
    '#default_value' => variable_get('efq_tools_cachetime', 30 * 60),
    '#description' => t("Set time cache in second (default : 30 min)"),
    '#states' => array(
      'disabled' => array(
        ':input[name="efq_tools_cache"]' => array('value' => 0),
      ),
    ),
  );

  return system_settings_form($form);
}

/**
 *  Implements hook_menu().
 */
function efq_tools_menu() {
  $items = array();
  $items['admin/settings/efq_tools'] = array(
    'title' => 'EFQ Tools module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('efq_tools_admin'),
    'access arguments' => array('administer EFQ Tools settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}
